---
---
<canvas id="particle-canvas"></canvas>

<style>
  canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    pointer-events: none;
  }
</style>

<script>
  import * as THREE from 'three';

  class ParticleSystem {
    scene: THREE.Scene;
    camera: THREE.PerspectiveCamera;
    renderer: THREE.WebGLRenderer;
    particles: THREE.Mesh[];
    colors: THREE.Color[];

    constructor() {
      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      this.renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('particle-canvas'),
        alpha: true
      });
      
      this.particles = [];
      this.colors = [
        new THREE.Color(1, 0.23, 0.19), // red
        new THREE.Color(0.04, 0.52, 1),  // blue
        new THREE.Color(1, 0.84, 0.04),  // yellow
        new THREE.Color(0.95, 0.95, 0.97) // white
      ];
      
      this.init();
      this.animate();
    }

    init() {
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.camera.position.z = 50;

      // Create particles
      const particleGeometry = new THREE.SphereGeometry(0.1, 8, 8);
      
      for (let i = 0; i < 200; i++) {
        const material = new THREE.MeshBasicMaterial({
          color: this.colors[i % this.colors.length],
          transparent: true,
          opacity: Math.random() * 0.5 + 0.2
        });
        
        const particle = new THREE.Mesh(particleGeometry, material);
        
        // Random position in a sphere
        const radius = Math.random() * 40;
        const theta = Math.random() * Math.PI * 2;
        const phi = Math.random() * Math.PI;
        
        particle.position.x = radius * Math.sin(phi) * Math.cos(theta);
        particle.position.y = radius * Math.sin(phi) * Math.sin(theta);
        particle.position.z = radius * Math.cos(phi);
        
        // Add velocity for animation
        particle.velocity = new THREE.Vector3(
          (Math.random() - 0.5) * 0.05,
          (Math.random() - 0.5) * 0.05,
          (Math.random() - 0.5) * 0.05
        );
        
        this.particles.push(particle);
        this.scene.add(particle);
      }

      // Handle window resize
      window.addEventListener('resize', () => {
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
      });
    }

    animate() {
      requestAnimationFrame(() => this.animate());

      // Rotate camera slowly
      this.camera.position.x = 50 * Math.cos(performance.now() * 0.0001);
      this.camera.position.z = 50 * Math.sin(performance.now() * 0.0001);
      this.camera.lookAt(0, 0, 0);

      // Update particles
      this.particles.forEach(particle => {
        particle.position.add(particle.velocity);
        
        // Boundary check and bounce
        ['x', 'y', 'z'].forEach(axis => {
          if (Math.abs(particle.position[axis]) > 40) {
            particle.velocity[axis] *= -1;
          }
        });
        
        // Rotate particle
        particle.rotation.x += 0.01;
        particle.rotation.y += 0.01;
      });

      this.renderer.render(this.scene, this.camera);
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ParticleSystem();
  });
</script>