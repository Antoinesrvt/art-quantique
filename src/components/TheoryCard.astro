---
interface Props {
  title: string;
  description?: string;
  color: string;
}

const { title, description, color } = Astro.props;
---

<div class="theory-card">
  <div class="theory-content">
    <div class="particle-color" style={`--particle-color: ${color}`}></div>
    <h3>{title}</h3>
    {description && <p>{description}</p>}
  </div>
  <div class="theory-particles"></div>
</div>

<style>
  .theory-card {
    text-align: center;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    position: relative;
    overflow: hidden;
    transition: transform 0.3s ease;
  }

  .theory-content {
    position: relative;
    z-index: 1;
  }

  .particle-color {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: var(--particle-color);
    margin: 0 auto 1rem;
    box-shadow: 0 0 20px var(--particle-color);
  }

  h3 {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
    background: linear-gradient(45deg, var(--quantum-white), var(--quantum-blue));
    -webkit-background-clip: text;
    color: transparent;
    transition: transform 0.3s ease;
  }

  p {
    font-size: 0.9rem;
    margin-bottom: 0;
    color: var(--quantum-white);
    opacity: 0.8;
    transition: transform 0.3s ease;
  }

  .theory-particles {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.5s ease;
    background: radial-gradient(
      circle at var(--x, 50%) var(--y, 50%),
      rgba(var(--quantum-blue-rgb), 0.2) 0%,
      transparent 50%
    );
  }

  .theory-card:hover {
    transform: translateY(-5px);
  }

  .theory-card:hover .theory-particles {
    opacity: 1;
  }

  .theory-card:hover h3 {
    transform: translateY(-5px);
  }

  .theory-card:hover p {
    transform: translateY(5px);
  }
</style>

<script>
  const cards = document.querySelectorAll('.theory-card');
  
  cards.forEach(card => {
    const particles = card.querySelector('.theory-particles');
    
    card.addEventListener('mousemove', (e) => {
      const rect = card.getBoundingClientRect();
      const x = (((e as MouseEvent).clientX - rect.left) / rect.width) * 100;
      const y = (((e as MouseEvent).clientY - rect.top) / rect.height) * 100;
      
      (particles as HTMLElement).style.setProperty('--x', `${x}%`);
      (particles as HTMLElement).style.setProperty('--y', `${y}%`);
    });
  });
</script>